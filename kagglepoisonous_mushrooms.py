# -*- coding: utf-8 -*-
"""KagglePoisonous Mushrooms.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r9qy8yFaC3DAy7sb2HmxPQK2OqMW3ibE
"""

import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.preprocessing import LabelEncoder

traindata=pd.read_csv('/content/drive/MyDrive/train.csv')
testdata=pd.read_csv('/content/drive/MyDrive/test.csv')
print(traindata.head(5))

traindata.info()

traindata.isna().sum()

def clean_data(data, fit=False):
    numerical_columns = data.select_dtypes(include=np.number).columns
    categorical_columns = ['cap-shape', 'cap-surface', 'cap-color', 'does-bruise-or-bleed', 'gill-attachment',
                           'gill-spacing', 'gill-color', 'stem-root', 'stem-surface', 'stem-color', 'veil-type',
                           'veil-color', 'has-ring', 'ring-type', 'spore-print-color', 'habitat', 'season']

    data[numerical_columns] = data[numerical_columns].fillna(data[numerical_columns].mean())
    data[categorical_columns] = data[categorical_columns].fillna(data[categorical_columns].mode().iloc[0])

    if 'class' in data.columns:
        data['class'] = data['class'].fillna(data['class'].mode().iloc[0])

    for col in categorical_columns:
        if fit:
            le = LabelEncoder()
            data[col] = le.fit_transform(data[col].astype(str))
            clean_data.encoders[col] = le
        else:
            le = clean_data.encoders[col]
            data[col] = data[col].astype(str).map(dict(zip(le.classes_, le.transform(le.classes_))))
            data[col] = data[col].fillna(-1).astype(int)

    return data

clean_data.encoders = {}

traindata = clean_data(traindata, fit=True)
testdata = clean_data(testdata, fit=False)

traindata

traindata['class'].value_counts()

traindata.shape

traindata.columns

traindata.isna().sum()

X=traindata.drop('class',axis=1)
y=traindata['class']

x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

logiregmodel=LogisticRegression(max_iter=1000)
logiregmodel.fit(x_train,y_train)
logireg_y_pred=logiregmodel.predict(x_test)
val_accuracy = accuracy_score(y_test, logireg_y_pred)
print(f"Accuracy Score: {val_accuracy}") # Use accuracy_score for classification

# Optionally, you can also look at other classification metrics
from sklearn.metrics import precision_score, recall_score, f1_score
print(f"Precision: {precision_score(y_test, logireg_y_pred, pos_label='p')}") # Change pos_label to 'e' if 'e' is the positive label
print(f"Recall: {recall_score(y_test, logireg_y_pred, pos_label='p')}") # Change pos_label to 'e' if 'e' is the positive label
print(f"F1-Score: {f1_score(y_test, logireg_y_pred, pos_label='p')}") # Change pos_label to 'e' if 'e' is the positive label

DTCmodel=DecisionTreeClassifier()
DTCmodel.fit(x_train,y_train)
DTC_y_pred=DTCmodel.predict(x_test)
val_accuracy = accuracy_score(y_test, DTC_y_pred)
print(f"Accuracy Score: {val_accuracy}") # Use accuracy_score for classification
# Optionally, you can also look at other classification metrics
from sklearn.metrics import precision_score, recall_score, f1_score
print(f"Precision: {precision_score(y_test, DTC_y_pred, pos_label='p')}") # Change pos_label to 'e' if 'e' is the positive label
print(f"Recall: {recall_score(y_test, DTC_y_pred, pos_label='p')}") # Change pos_label to 'e' if 'e' is the positive label
print(f"F1-Score: {f1_score(y_test, DTC_y_pred, pos_label='p')}") # Change pos_label to 'e' if 'e' is the positive label

RFCmodel=RandomForestClassifier()
RFCmodel.fit(x_train,y_train)
RFC_y_pred=RFCmodel.predict(x_test)
val_accuracy = accuracy_score(y_test, RFC_y_pred)
print(f"Accuracy Score: {val_accuracy}") # Use accuracy_score for classification
# Optionally, you can also look at other classification metrics
from sklearn.metrics import precision_score, recall_score, f1_score
print(f"Precision: {precision_score(y_test, RFC_y_pred, pos_label='p')}") # Change pos_label to 'e' if 'e' is the positive label
print(f"Recall: {recall_score(y_test, RFC_y_pred, pos_label='p')}") # Change pos_label to 'e' if 'e' is the positive label
print(f"F1-Score: {f1_score(y_test, RFC_y_pred, pos_label='p')}") # Change pos_label to 'e' if 'e' is the positive label

test_predictions = RFCmodel.predict(testdata)

# Create submission file
submission = pd.DataFrame({'id': testdata['id'], 'class': test_predictions})
submission.to_csv('submission.csv', index=False)
print("\nSubmission file created successfully!")